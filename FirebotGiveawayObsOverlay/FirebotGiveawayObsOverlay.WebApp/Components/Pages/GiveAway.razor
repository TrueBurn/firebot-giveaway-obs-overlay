@using FirebotGiveawayObsOverlay.WebApp.Components.Layout
@using FirebotGiveawayObsOverlay.WebApp.Helpers
@using FirebotGiveawayObsOverlay.WebApp.Extensions
@using FirebotGiveawayObsOverlay.WebApp.Services
@using System.Timers
@inject TimerService TimerService

@layout NoMenuLayout
@page "/giveaway"
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Give Away</PageTitle>

@if (isGiveAwayRunning)
{
    <div class="container @(doesGiveawayHaveWinner ? "has-winner" : "")">
        <div class="prize-section">
            <h1 class="title">
                <span class="primarySpan">@prize</span>
            </h1>
        </div>
        
        <div class="info-section">
            <h2 class="title-timer @(timerExpired ? "timer-flash" : "")">
                @FormatTimer(counterTimeSpan)
            </h2>
            
            @if (entries.Any())
            {
                <h2 class="title-entries">
                    <span class="@(previousEntryCount != entries.Length ? "entry-count-animate" : "")">
                        @entries.Length
                    </span>
                    Entries
                </h2>
            }
        </div>
        
        @if (doesGiveawayHaveWinner)
        {
            <div class="winner-overlay">
                <h2 class="title-winner">
                    <span class="winner-label">Winner:</span>
                    <span class="secondarySpan">@winner</span>
                </h2>
            </div>
        }
    </div>
}

@code {
    private string prize = string.Empty;
    private string winner = string.Empty;
    private string[] entries = [];
    private Timer fileScanTimer = new Timer(1000);
    private Timer countdownTimer = new Timer(1000);
    private double counter;
    private TimeSpan counterTimeSpan = TimeSpan.FromMinutes(59).Add(TimeSpan.FromSeconds(59));
    private bool timerExpired = false;

    private bool isGiveAwayRunning = false;
    private bool doesGiveawayHaveWinner = false;
    private int previousEntryCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetLatestGiveAwayDetails();
        fileScanTimer.Elapsed += new ElapsedEventHandler(HandleFileScanTimer);
        countdownTimer.Elapsed += new ElapsedEventHandler(HandleCountdownTimer);
        StartFileScanTimer();
        StartCountdownTimer();

        // Subscribe to timer reset events
        TimerService.OnTimerReset += HandleTimerReset;
    }

    private void HandleTimerReset()
    {
        ResetTimer();
        InvokeAsync(StateHasChanged);
    }

    private void StartFileScanTimer()
    {        
        fileScanTimer.Start();
    }

    private void StartCountdownTimer()
    {
        counter = counterTimeSpan.TotalSeconds;
        countdownTimer.Start();
    }

    public async void HandleFileScanTimer(object? source, ElapsedEventArgs e)
    {
        await GetLatestGiveAwayDetails();
        await InvokeAsync(StateHasChanged);
    }

    public async void HandleCountdownTimer(object? source, ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
            counterTimeSpan = TimeSpan.FromSeconds(counter);
        }
        else
        {
            timerExpired = true;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetLatestGiveAwayDetails()
    {
        Task<string> getPrizeTask = FireBotFileReader.GetPrizeAsync();
        Task<string[]> getEntriesTask = FireBotFileReader.GetEntriesAsync();
        Task<string> getWinnerTask = FireBotFileReader.GetWinnerAsync();

        await Task.WhenAll(getPrizeTask, getEntriesTask, getWinnerTask).ConfigureAwait(false);

        prize = getPrizeTask.Result;
        var newEntries = getEntriesTask.Result;
        
        // Update previous count before setting new entries
        previousEntryCount = entries.Length;
        entries = newEntries;
        
        winner = getWinnerTask.Result;

        isGiveAwayRunning = !string.IsNullOrWhiteSpace(prize);
        doesGiveawayHaveWinner = !string.IsNullOrWhiteSpace(winner);
        
        // If giveaway has a winner, pause the countdown timer
        if (doesGiveawayHaveWinner && countdownTimer.Enabled)
        {
            countdownTimer.Stop();
        }
        
        // If giveaway is not running, reset the timer
        if (!isGiveAwayRunning)
        {
            ResetTimer();
        }
    }
    
    private void ResetTimer()
    {
        countdownTimer.Stop();
        var (minutes, seconds) = GiveAwayHelpers.GetCountdownTime();
        counter = TimeSpan.FromMinutes(minutes).Add(TimeSpan.FromSeconds(seconds)).TotalSeconds;
        counterTimeSpan = TimeSpan.FromSeconds(counter);
        timerExpired = false;
        
        // Restart the timer if a giveaway is running and there's no winner
        if (isGiveAwayRunning && !doesGiveawayHaveWinner)
        {
            countdownTimer.Start();
        }
    }

    // Format timer to have colored numbers and white units with better spacing
    private MarkupString FormatTimer(TimeSpan time)
    {
        if (time.TotalMinutes >= 1)
        {
            return new MarkupString($"<span class='timer-numbers'>{time.Minutes:D2}</span><span class='timer-units'>m</span><span class='timer-numbers'>{time.Seconds:D2}</span><span class='timer-units'>s</span>");
        }
        return new MarkupString($"<span class='timer-numbers'>{time.Seconds:D2}</span><span class='timer-units'>s</span>");
    }

    public void Dispose()
    {
        fileScanTimer.Dispose();
        countdownTimer.Dispose();
        
        // Unsubscribe from timer reset events
        TimerService.OnTimerReset -= HandleTimerReset;
    }
}

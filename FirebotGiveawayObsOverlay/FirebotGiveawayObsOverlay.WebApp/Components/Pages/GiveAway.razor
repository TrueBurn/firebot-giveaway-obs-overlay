@using FirebotGiveawayObsOverlay.WebApp.Components.Layout
@using FirebotGiveawayObsOverlay.WebApp.Helpers
@using FirebotGiveawayObsOverlay.WebApp.Extensions
@using FirebotGiveawayObsOverlay.WebApp.Services
@using System.Timers
@inject TimerService TimerService

@layout NoMenuLayout
@page "/giveaway"
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Give Away</PageTitle>

@if (isGiveAwayRunning)
{
    <div class="container @(doesGiveawayHaveWinner ? "has-winner" : "")" 
         style="--prize-width: @(prizeSectionWidth)%; 
                --info-width: @(100 - prizeSectionWidth)%;
                --prize-font-size: @(prizeFontSize)rem;
                --timer-font-size: @(timerFontSize)rem;
                --entries-font-size: @(entriesFontSize)rem;">
        <div class="prize-section">
            <h1 class="title">
                <span class="primarySpan">@prize</span>
            </h1>
        </div>
        
        <div class="info-section">
            @if (isTimerEnabled)
            {
                <h2 class="title-timer @(timerExpired ? "timer-flash" : "")">
                    @FormatTimer(counterTimeSpan)
                </h2>
            }
            
            <h2 class="title-entries">
                <span class="@(previousEntryCount != entries.Length ? "entry-count-animate" : "")">
                    @entries.Length
                </span>
                Entries
            </h2>
        </div>
        
        @if (doesGiveawayHaveWinner)
        {
            <div class="winner-overlay">
                <h2 class="title-winner">
                    <span class="winner-label">Winner:</span>
                    <span class="secondarySpan">@winner</span>
                </h2>
            </div>
        }
    </div>
}

@code {
    private string prize = string.Empty;
    private string winner = string.Empty;
    private string[] entries = [];
    private Timer fileScanTimer = new Timer(1000);
    private Timer countdownTimer = new Timer(1000);
    private double counter;
    private TimeSpan counterTimeSpan = TimeSpan.FromMinutes(59).Add(TimeSpan.FromSeconds(59));
    private bool timerExpired = false;

    private bool isGiveAwayRunning = false;
    private bool doesGiveawayHaveWinner = false;
    private int previousEntryCount = 0;

    private int prizeSectionWidth = GiveAwayHelpers.GetPrizeSectionWidth();
    private double prizeFontSize = GiveAwayHelpers.GetPrizeFontSize();
    private double timerFontSize = GiveAwayHelpers.GetTimerFontSize();
    private double entriesFontSize = GiveAwayHelpers.GetEntriesFontSize();
    private bool isTimerEnabled = GiveAwayHelpers.GetCountdownTimerEnabled();

    protected override async Task OnInitializedAsync()
    {
        await GetLatestGiveAwayDetails();
        fileScanTimer.Elapsed += new ElapsedEventHandler(HandleFileScanTimer);
        countdownTimer.Elapsed += new ElapsedEventHandler(HandleCountdownTimer);
        StartFileScanTimer();
        
        // Only start countdown timer if enabled
        if (isTimerEnabled)
        {
            StartCountdownTimer();
        }

        // Subscribe to timer reset events
        TimerService.OnTimerReset += HandleTimerReset;
    }

    private void HandleTimerReset()
    {
        ResetTimer();
        InvokeAsync(StateHasChanged);
    }

    private void StartFileScanTimer()
    {        
        fileScanTimer.Start();
    }

    private void StartCountdownTimer()
    {
        counter = counterTimeSpan.TotalSeconds;
        countdownTimer.Start();
    }

    public async void HandleFileScanTimer(object? source, ElapsedEventArgs e)
    {
        await GetLatestGiveAwayDetails();
        await InvokeAsync(StateHasChanged);
    }

    public async void HandleCountdownTimer(object? source, ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
            counterTimeSpan = TimeSpan.FromSeconds(counter);
        }
        else
        {
            timerExpired = true;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetLatestGiveAwayDetails()
    {
        Task<string> getPrizeTask = FireBotFileReader.GetPrizeAsync();
        Task<string[]> getEntriesTask = FireBotFileReader.GetEntriesAsync();
        Task<string> getWinnerTask = FireBotFileReader.GetWinnerAsync();

        await Task.WhenAll(getPrizeTask, getEntriesTask, getWinnerTask).ConfigureAwait(false);

        string newPrize = getPrizeTask.Result;
        var newEntries = getEntriesTask.Result;
        
        // Check if prize status has changed
        bool hadPrizeBefore = isGiveAwayRunning;
        bool hasPrizeNow = !string.IsNullOrWhiteSpace(newPrize);
        
        // Update previous count before setting new entries
        previousEntryCount = entries.Length;
        entries = newEntries;
        
        string newWinner = getWinnerTask.Result;
        
        // Check if winner status has changed
        bool hadWinnerBefore = doesGiveawayHaveWinner;
        bool hasWinnerNow = !string.IsNullOrWhiteSpace(newWinner);
        
        // Update prize, winner and status flags
        prize = newPrize;
        winner = newWinner;
        isGiveAwayRunning = hasPrizeNow;
        doesGiveawayHaveWinner = hasWinnerNow;
        
        // Timer management - only if timer is enabled
        if (isTimerEnabled)
        {
            // If giveaway has a winner, pause the countdown timer
            if (doesGiveawayHaveWinner && countdownTimer.Enabled)
            {
                countdownTimer.Stop();
            }
            // If winner was cleared and giveaway is still running, reset and start the timer
            else if (hadWinnerBefore && !doesGiveawayHaveWinner && isGiveAwayRunning)
            {
                ResetTimer();
            }
            // If prize was added (and there was no prize before), reset and start the timer
            else if (!hadPrizeBefore && hasPrizeNow && !doesGiveawayHaveWinner)
            {
                ResetTimer();
            }
            // If giveaway is not running, reset the timer
            else if (!isGiveAwayRunning)
            {
                ResetTimer();
            }
        }

        // Update the prize section width and font sizes from settings
        prizeSectionWidth = GiveAwayHelpers.GetPrizeSectionWidth();
        prizeFontSize = GiveAwayHelpers.GetPrizeFontSize();
        timerFontSize = GiveAwayHelpers.GetTimerFontSize();
        entriesFontSize = GiveAwayHelpers.GetEntriesFontSize();
        
        // Check for timer enabled state changes
        bool wasTimerEnabled = isTimerEnabled;
        isTimerEnabled = GiveAwayHelpers.GetCountdownTimerEnabled();
        
        // Handle timer state changes
        if (wasTimerEnabled && !isTimerEnabled)
        {
            // Timer was disabled - stop it
            countdownTimer.Stop();
        }
        else if (!wasTimerEnabled && isTimerEnabled && isGiveAwayRunning && !doesGiveawayHaveWinner)
        {
            // Timer was enabled - reset and start it if giveaway is running
            ResetTimer();
        }
    }
    
    private void ResetTimer()
    {
        // Always reset timer values, but only start if enabled
        countdownTimer.Stop();
        var (hours, minutes, seconds) = GiveAwayHelpers.GetCountdownTime();
        counter = TimeSpan.FromHours(hours).Add(TimeSpan.FromMinutes(minutes)).Add(TimeSpan.FromSeconds(seconds)).TotalSeconds;
        counterTimeSpan = TimeSpan.FromSeconds(counter);
        timerExpired = false;
        
        // Only start the timer if enabled and conditions are met
        if (isTimerEnabled && isGiveAwayRunning && !doesGiveawayHaveWinner)
        {
            countdownTimer.Start();
        }
    }

    // Format timer to have colored numbers with colon separator
    private MarkupString FormatTimer(TimeSpan time)
    {
        if (time.TotalHours >= 1)
        {
            return new MarkupString($"<span class='timer-numbers'>{time.Hours:D2}</span><span class='timer-separator'>:</span><span class='timer-numbers'>{time.Minutes:D2}</span><span class='timer-separator'>:</span><span class='timer-numbers'>{time.Seconds:D2}</span>");
        }
        else if (time.TotalMinutes >= 1)
        {
            return new MarkupString($"<span class='timer-numbers'>{time.Minutes:D2}</span><span class='timer-separator'>:</span><span class='timer-numbers'>{time.Seconds:D2}</span>");
        }
        return new MarkupString($"<span class='timer-numbers'>{time.Seconds:D2}</span>");
    }

    public void Dispose()
    {
        fileScanTimer.Dispose();
        countdownTimer.Dispose();
        
        // Unsubscribe from timer reset events
        TimerService.OnTimerReset -= HandleTimerReset;
    }
}

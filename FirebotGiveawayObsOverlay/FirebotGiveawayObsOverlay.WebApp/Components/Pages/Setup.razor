@using FirebotGiveawayObsOverlay.WebApp.Helpers
@using FirebotGiveawayObsOverlay.WebApp.Services
@inject TimerService TimerService

@page "/setup"
@rendermode InteractiveServer

<PageTitle>Setup</PageTitle>

<h3>Setup</h3>

<hr />

<div class="mb-3">
    <label class="form-label">Countdown Timer</label>
    <div class="d-flex gap-2">
        <div class="flex-grow-1">
            <label class="form-label">Minutes</label>
            <input type="number" required
                   placeholder="Minutes"
                   class="form-control"
                   min="0"
                   max="99"
                   @bind="countdownMinutes"
                   @bind:event="oninput"
                   @bind:after="SetCountdownTime" />
        </div>
        <div class="flex-grow-1">
            <label class="form-label">Seconds</label>
            <input type="number" required
                   placeholder="Seconds"
                   class="form-control"
                   min="0"
                   max="59"
                   @bind="countdownSeconds"
                   @bind:event="oninput"
                   @bind:after="SetCountdownTime" />
        </div>
    </div>
</div>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ResetGiveawayTimer">Reset Timer</button>
    <span class="ms-2 @(resetSuccess ? "text-success" : "text-danger")">@resetMessage</span>
</div>

<div class="mb-3">
    <label class="form-label">Firebot file path</label>
    <input 
        type="text" required
        placeholder="Set the path where to find the Firebot files" 
        class="form-control"
        @bind="firebotFilePath"
        @bind:event="oninput"
        @bind:after="SetFirebotFilePath" />
</div>

<div class="mb-3">
    <label class="form-label">Layout Settings</label>
    <div class="d-flex gap-2 align-items-center">
        <div class="flex-grow-1">
            <label class="form-label">Prize Section Width (%)</label>
            <input type="range" 
                   class="form-range" 
                   min="50" 
                   max="90" 
                   step="5"
                   @bind="prizeSectionWidth" 
                   @bind:event="oninput"
                   @bind:after="SetPrizeSectionWidth" />
        </div>
        <div style="width: 50px; text-align: center;">
            <span class="badge bg-primary">@prizeSectionWidth%</span>
        </div>
    </div>
</div>

<div class="mb-3">
    <label class="form-label">Font Sizes</label>
    <div class="mb-2">
        <div class="d-flex gap-2 align-items-center">
            <div class="flex-grow-1">
                <label class="form-label">Prize Font Size</label>
                <input type="range" 
                       class="form-range" 
                       min="1.0" 
                       max="6.0" 
                       step="0.1"
                       @bind="prizeFontSize" 
                       @bind:event="oninput"
                       @bind:after="SetPrizeFontSize" />
            </div>
            <div style="width: 60px; text-align: center;">
                <span class="badge bg-primary">@prizeFontSize.ToString("0.0")rem</span>
            </div>
        </div>
    </div>
    
    <div class="mb-2">
        <div class="d-flex gap-2 align-items-center">
            <div class="flex-grow-1">
                <label class="form-label">Timer Font Size</label>
                <input type="range" 
                       class="form-range" 
                       min="1.0" 
                       max="6.0" 
                       step="0.1"
                       @bind="timerFontSize" 
                       @bind:event="oninput"
                       @bind:after="SetTimerFontSize" />
            </div>
            <div style="width: 60px; text-align: center;">
                <span class="badge bg-primary">@timerFontSize.ToString("0.0")rem</span>
            </div>
        </div>
    </div>
    
    <div class="mb-2">
        <div class="d-flex gap-2 align-items-center">
            <div class="flex-grow-1">
                <label class="form-label">Entries Font Size</label>
                <input type="range" 
                       class="form-range" 
                       min="1.0" 
                       max="6.0" 
                       step="0.1"
                       @bind="entriesFontSize" 
                       @bind:event="oninput"
                       @bind:after="SetEntriesFontSize" />
            </div>
            <div style="width: 60px; text-align: center;">
                <span class="badge bg-primary">@entriesFontSize.ToString("0.0")rem</span>
            </div>
        </div>
    </div>
</div>

<div class="mb-4">
    <h5>Integrations</h5>
    <div class="d-flex gap-2">
        <a href="/twitch-setup" class="btn btn-primary">
            <i class="bi bi-twitch"></i> Twitch Setup
        </a>
    </div>
</div>

@code {
    private string firebotFilePath = GiveAwayHelpers.GetFireBotFileFolder();
    private int countdownMinutes;
    private int countdownSeconds;
    private string resetMessage = "";
    private bool resetSuccess = false;
    private int prizeSectionWidth = GiveAwayHelpers.GetPrizeSectionWidth();
    private double prizeFontSize = GiveAwayHelpers.GetPrizeFontSize();
    private double timerFontSize = GiveAwayHelpers.GetTimerFontSize();
    private double entriesFontSize = GiveAwayHelpers.GetEntriesFontSize();

    protected override void OnInitialized()
    {
        var (minutes, seconds) = GiveAwayHelpers.GetCountdownTime();
        countdownMinutes = minutes;
        countdownSeconds = seconds;
    }

    private void SetFirebotFilePath()
    {
        GiveAwayHelpers.SetFireBotFileFolder(firebotFilePath);
    }

    private void SetCountdownTime()
    {
        GiveAwayHelpers.SetCountdownTime(countdownMinutes, countdownSeconds);
    }

    private void ResetGiveawayTimer()
    {
        try
        {
            TimerService.ResetTimer();
            resetMessage = "Timer reset successfully!";
            resetSuccess = true;
        }
        catch (Exception ex)
        {
            resetMessage = $"Error: {ex.Message}";
            resetSuccess = false;
        }
    }

    private void SetPrizeSectionWidth()
    {
        GiveAwayHelpers.SetPrizeSectionWidth(prizeSectionWidth);
    }

    private void SetPrizeFontSize()
    {
        GiveAwayHelpers.SetPrizeFontSize(prizeFontSize);
    }

    private void SetTimerFontSize()
    {
        GiveAwayHelpers.SetTimerFontSize(timerFontSize);
    }

    private void SetEntriesFontSize()
    {
        GiveAwayHelpers.SetEntriesFontSize(entriesFontSize);
    }
}

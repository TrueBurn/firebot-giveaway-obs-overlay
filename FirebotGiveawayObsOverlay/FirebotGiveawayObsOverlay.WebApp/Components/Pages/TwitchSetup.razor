@using FirebotGiveawayObsOverlay.WebApp.Models
@using FirebotGiveawayObsOverlay.WebApp.Services
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Json
@inject ISettingsService SettingsService
@inject TwitchService TwitchService
@inject TwitchAuthService TwitchAuthService
@implements IDisposable

@page "/twitch-setup"
@rendermode InteractiveServer

<PageTitle>Twitch Setup</PageTitle>

<h3>Twitch Integration Setup</h3>

<hr />

<EditForm Model="@twitchSettings" OnValidSubmit="SaveSettings">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3 form-check">
        <InputCheckbox @bind-Value="twitchSettings.Enabled" class="form-check-input" id="enabled" />
        <label class="form-check-label" for="enabled">Enable Twitch Integration</label>
    </div>

    <div class="mb-3">
        <label class="form-label">Channel Name</label>
        <InputText @bind-Value="twitchSettings.Channel" class="form-control" placeholder="Your Twitch channel name" />
        <ValidationMessage For="@(() => twitchSettings.Channel)" />
        <div class="form-text">Enter your Twitch channel name without the @@ symbol</div>
    </div>

    <div class="mb-4">
        <div class="form-check form-check-inline">
            <InputRadioGroup @bind-Value="twitchSettings.AuthMode" Name="authMode">
                <div class="form-check">
                    <InputRadio Value="AuthMode.Simple" class="form-check-input" id="simpleMode" />
                    <label class="form-check-label" for="simpleMode">Simple Authentication</label>
                </div>
                <div class="form-check">
                    <InputRadio Value="AuthMode.Advanced" class="form-check-input" id="advancedMode" />
                    <label class="form-check-label" for="advancedMode">Advanced Authentication</label>
                </div>
            </InputRadioGroup>
        </div>
        <div class="form-text mb-2">
            @if (twitchSettings.AuthMode == AuthMode.Simple)
            {
                <span>Simple mode uses our pre-registered application for authentication</span>
            }
            else
            {
                <span>Advanced mode requires your own Twitch application credentials</span>
            }
        </div>
    </div>

    @if (twitchSettings.AuthMode == AuthMode.Simple)
    {
        <div class="mb-4">
            <div class="d-flex align-items-center">
                <button type="button" class="btn btn-primary me-3" @onclick="InitiateAuthentication" disabled="@isAuthenticating">
                    @if (isAuthenticating)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Authenticating...</span>
                    }
                    else
                    {
                        <span>Login with Twitch</span>
                    }
                </button>

                @if (isAuthenticated)
                {
                    <div class="text-success d-flex align-items-center">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        <span>Authenticated</span>
                        <button type="button" class="btn btn-sm btn-outline-danger ms-3" @onclick="RevokeToken">
                            Log Out
                        </button>
                    </div>
                }
                else if (!string.IsNullOrEmpty(authStatusMessage))
                {
                    <div class="text-danger">
                        <i class="bi bi-exclamation-circle-fill me-2"></i>
                        <span>@authStatusMessage</span>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="mb-3">
            <label class="form-label">Client ID</label>
            <InputText @bind-Value="twitchSettings.ClientId" class="form-control" placeholder="Twitch API Client ID" />
            <ValidationMessage For="@(() => twitchSettings.ClientId)" />
            <div class="form-text">
                Get your Client ID from the <a href="https://dev.twitch.tv/console/apps" target="_blank">Twitch Developer Console</a>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Client Secret</label>
            <InputText @bind-Value="twitchSettings.ClientSecret" class="form-control" type="password" placeholder="Twitch API Client Secret" />
            <ValidationMessage For="@(() => twitchSettings.ClientSecret)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Redirect URI</label>
            <InputText @bind-Value="twitchSettings.RedirectUri" class="form-control" placeholder="OAuth Redirect URI" />
            <ValidationMessage For="@(() => twitchSettings.RedirectUri)" />
            <div class="form-text">Usually http://localhost:3000/auth/callback for local development</div>
        </div>
    }

    <div class="mb-4">
        <h5>Command Settings</h5>
        
        <div class="mb-3">
            <label class="form-label">Join Command</label>
            <InputText @bind-Value="twitchSettings.Commands.Join" class="form-control" placeholder="!join" />
            <ValidationMessage For="@(() => twitchSettings.Commands.Join)" />
        </div>
        
        <div class="mb-3">
            <label class="form-label">Start Giveaway Command</label>
            <InputText @bind-Value="twitchSettings.Commands.StartGiveaway" class="form-control" placeholder="!startgiveaway" />
            <ValidationMessage For="@(() => twitchSettings.Commands.StartGiveaway)" />
        </div>
        
        <div class="mb-3">
            <label class="form-label">Draw Winner Command</label>
            <InputText @bind-Value="twitchSettings.Commands.DrawWinner" class="form-control" placeholder="!drawwinner" />
            <ValidationMessage For="@(() => twitchSettings.Commands.DrawWinner)" />
        </div>
    </div>

    <div class="mb-4">
        <h5>Follower Requirements</h5>
        
        <div class="mb-3 form-check">
            <InputCheckbox @bind-Value="twitchSettings.RequireFollower" class="form-check-input" id="requireFollower" />
            <label class="form-check-label" for="requireFollower">Require users to be followers</label>
        </div>
        
        <div class="mb-3">
            <label class="form-label">Minimum Follow Age (days)</label>
            <InputNumber @bind-Value="twitchSettings.FollowerMinimumAgeDays" class="form-control" min="0" />
            <ValidationMessage For="@(() => twitchSettings.FollowerMinimumAgeDays)" />
            <div class="form-text">Set to 0 for no minimum age requirement</div>
        </div>
    </div>

    <div class="mb-4">
        <button type="button" class="btn btn-info me-2" @onclick="TestConnection" disabled="@isTestingConnection">
            @if (isTestingConnection)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Testing...</span>
            }
            else
            {
                <span>Test Connection</span>
            }
        </button>
        
        @if (!string.IsNullOrEmpty(connectionTestResult))
        {
            <span class="@(connectionTestSuccess ? "text-success" : "text-danger")">
                @connectionTestResult
            </span>
        }
    </div>

    <div class="d-flex justify-content-between">
        <a href="/setup" class="btn btn-secondary">Back to Setup</a>
        <button type="submit" class="btn btn-primary" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Saving...</span>
            }
            else
            {
                <span>Save Settings</span>
            }
        </button>
    </div>
</EditForm>

@if (showDeviceCodeModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Twitch Authentication</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeviceCodeModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>To authenticate with Twitch, please follow these steps:</p>
                    <ol>
                        <li>Go to <a href="@verificationUri" target="_blank">@verificationUri</a></li>
                        <li>Enter the following code:</li>
                    </ol>
                    <div class="d-flex justify-content-center mb-3">
                        <div class="user-code p-3 bg-light border rounded">
                            <h3 class="mb-0">@userCode</h3>
                        </div>
                    </div>
                    <p>This code will expire in @expiresInMinutes minutes.</p>
                    <div class="progress mb-3">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" 
                             style="width: @progressPercentage%" 
                             aria-valuenow="@progressPercentage" 
                             aria-valuemin="0" 
                             aria-valuemax="100"></div>
                    </div>
                    <p class="text-center">Waiting for authentication...</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeviceCodeModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private TwitchSettings twitchSettings = new();
    private bool isSaving = false;
    private bool isTestingConnection = false;
    private string connectionTestResult = string.Empty;
    private bool connectionTestSuccess = false;
    
    // Authentication related properties
    private bool isAuthenticated = false;
    private bool isAuthenticating = false;
    private string authStatusMessage = string.Empty;
    
    // Device code modal properties
    private bool showDeviceCodeModal = false;
    private string userCode = string.Empty;
    private string verificationUri = string.Empty;
    private int expiresIn = 0;
    private int expiresInMinutes => expiresIn / 60;
    private int progressPercentage = 100;
    private System.Threading.Timer? progressTimer;

    protected override void OnInitialized()
    {
        // Clone the settings to avoid modifying the original
        var currentSettings = SettingsService.CurrentTwitchSettings;
        
        twitchSettings = new TwitchSettings
        {
            Enabled = currentSettings.Enabled,
            Channel = currentSettings.Channel,
            AuthMode = currentSettings.AuthMode,
            ClientId = currentSettings.ClientId,
            ClientSecret = currentSettings.ClientSecret,
            RedirectUri = currentSettings.RedirectUri,
            RequireFollower = currentSettings.RequireFollower,
            FollowerMinimumAgeDays = currentSettings.FollowerMinimumAgeDays,
            Commands = new CommandSettings
            {
                Join = currentSettings.Commands.Join,
                StartGiveaway = currentSettings.Commands.StartGiveaway,
                DrawWinner = currentSettings.Commands.DrawWinner
            }
        };
        
        // Subscribe to settings changes
        SettingsService.SettingsChanged += OnSettingsChanged;
        
        // Subscribe to auth service events
        TwitchAuthService.AuthStatusChanged += OnAuthStatusChanged;
        TwitchAuthService.DeviceCodeReceived += OnDeviceCodeReceived;
        
        // Check initial authentication status
        isAuthenticated = TwitchAuthService.IsAuthenticated;
    }
    
    private void OnSettingsChanged(object sender, SettingsChangedEventArgs e)
    {
        if (e.SectionName == "TwitchSettings" && !isSaving)
        {
            // Only update if we're not in the middle of saving
            var currentSettings = SettingsService.CurrentTwitchSettings;
            
            twitchSettings = new TwitchSettings
            {
                Enabled = currentSettings.Enabled,
                Channel = currentSettings.Channel,
                AuthMode = currentSettings.AuthMode,
                ClientId = currentSettings.ClientId,
                ClientSecret = currentSettings.ClientSecret,
                RedirectUri = currentSettings.RedirectUri,
                RequireFollower = currentSettings.RequireFollower,
                FollowerMinimumAgeDays = currentSettings.FollowerMinimumAgeDays,
                Commands = new CommandSettings
                {
                    Join = currentSettings.Commands.Join,
                    StartGiveaway = currentSettings.Commands.StartGiveaway,
                    DrawWinner = currentSettings.Commands.DrawWinner
                }
            };
            
            InvokeAsync(StateHasChanged);
        }
    }
    
    private void OnAuthStatusChanged(object? sender, AuthStatusChangedEventArgs e)
    {
        isAuthenticated = e.IsAuthenticated;
        authStatusMessage = e.Message;
        isAuthenticating = false;
        
        if (e.IsAuthenticated)
        {
            CloseDeviceCodeModal();
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private void OnDeviceCodeReceived(object? sender, DeviceCodeReceivedEventArgs e)
    {
        userCode = e.UserCode;
        verificationUri = e.VerificationUri;
        expiresIn = e.ExpiresIn;
        progressPercentage = 100;
        
        // Show the device code modal
        showDeviceCodeModal = true;
        
        // Set up a timer to update the progress bar
        progressTimer?.Dispose();
        progressTimer = new System.Threading.Timer(_ =>
        {
            progressPercentage = Math.Max(0, (int)(100 * (expiresIn - (DateTime.UtcNow - DateTime.UtcNow).TotalSeconds) / expiresIn));
            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
        
        InvokeAsync(StateHasChanged);
    }
    
    private void CloseDeviceCodeModal()
    {
        showDeviceCodeModal = false;
        progressTimer?.Dispose();
        progressTimer = null;
        
        // If we're still authenticating, cancel it
        if (isAuthenticating)
        {
            TwitchAuthService.CancelAuthentication();
            isAuthenticating = false;
        }
        
        InvokeAsync(StateHasChanged);
    }

    private async Task InitiateAuthentication()
    {
        isAuthenticating = true;
        authStatusMessage = string.Empty;
        
        try
        {
            // Use simple mode authentication
            await TwitchAuthService.InitiateAuthenticationAsync(true);
        }
        catch (Exception ex)
        {
            authStatusMessage = $"Error: {ex.Message}";
            isAuthenticating = false;
        }
    }
    
    private async Task RevokeToken()
    {
        try
        {
            await TwitchAuthService.RevokeTokenAsync();
        }
        catch (Exception ex)
        {
            authStatusMessage = $"Error revoking token: {ex.Message}";
        }
    }

    private async Task TestConnection()
    {
        if (string.IsNullOrWhiteSpace(twitchSettings.Channel))
        {
            connectionTestResult = "Please fill in Channel name before testing";
            connectionTestSuccess = false;
            return;
        }
        
        if (twitchSettings.AuthMode == AuthMode.Advanced && 
            (string.IsNullOrWhiteSpace(twitchSettings.ClientId) || 
             string.IsNullOrWhiteSpace(twitchSettings.ClientSecret)))
        {
            connectionTestResult = "Please fill in Client ID and Client Secret before testing";
            connectionTestSuccess = false;
            return;
        }
        
        if (twitchSettings.AuthMode == AuthMode.Simple && !isAuthenticated)
        {
            connectionTestResult = "Please authenticate with Twitch before testing";
            connectionTestSuccess = false;
            return;
        }

        isTestingConnection = true;
        connectionTestResult = string.Empty;
        
        try
        {
            var result = await TwitchService.TestConnectionAsync(twitchSettings);
            connectionTestResult = result ? "Connection successful!" : "Connection failed. Please check your credentials.";
            connectionTestSuccess = result;
        }
        catch (Exception ex)
        {
            connectionTestResult = $"Error: {ex.Message}";
            connectionTestSuccess = false;
        }
        finally
        {
            isTestingConnection = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task SaveSettings()
    {
        if (!ValidateSettings())
        {
            return;
        }

        isSaving = true;

        try
        {
            // Use the settings service to update the settings
            await SettingsService.UpdateTwitchSettingsAsync(twitchSettings);
            
            // If Twitch is enabled, try to connect
            if (twitchSettings.Enabled)
            {
                try
                {
                    await TwitchService.ConnectAsync();
                }
                catch (Exception ex)
                {
                    connectionTestResult = $"Settings saved, but failed to connect: {ex.Message}";
                    connectionTestSuccess = false;
                }
            }
            else
            {
                // If Twitch is disabled, disconnect
                TwitchService.Disconnect();
            }
            
            connectionTestResult = "Settings saved successfully!";
            connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            connectionTestResult = $"Error saving settings: {ex.Message}";
            connectionTestSuccess = false;
        }
        finally
        {
            isSaving = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private bool ValidateSettings()
    {
        // If Twitch is enabled, validate required fields
        if (twitchSettings.Enabled)
        {
            if (string.IsNullOrWhiteSpace(twitchSettings.Channel))
            {
                connectionTestResult = "Channel name is required when Twitch integration is enabled";
                connectionTestSuccess = false;
                return false;
            }
            
            if (twitchSettings.AuthMode == AuthMode.Advanced)
            {
                if (string.IsNullOrWhiteSpace(twitchSettings.ClientId))
                {
                    connectionTestResult = "Client ID is required when using Advanced authentication mode";
                    connectionTestSuccess = false;
                    return false;
                }
                
                if (string.IsNullOrWhiteSpace(twitchSettings.ClientSecret))
                {
                    connectionTestResult = "Client Secret is required when using Advanced authentication mode";
                    connectionTestSuccess = false;
                    return false;
                }
            }
            else if (twitchSettings.AuthMode == AuthMode.Simple && !isAuthenticated)
            {
                connectionTestResult = "Please authenticate with Twitch before enabling integration in Simple mode";
                connectionTestSuccess = false;
                return false;
            }
        }
        
        return true;
    }
    
    public void Dispose()
    {
        // Unsubscribe from events
        SettingsService.SettingsChanged -= OnSettingsChanged;
        TwitchAuthService.AuthStatusChanged -= OnAuthStatusChanged;
        TwitchAuthService.DeviceCodeReceived -= OnDeviceCodeReceived;
        
        // Dispose of timer
        progressTimer?.Dispose();
    }
}